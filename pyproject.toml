[tool.poetry]
name = "pepbench"
version = "0.1.0"
description = "A python package to benchmark different pre-ejection period (PEP) extraction algorithms."
authors = ["Robert Richer <robert.richer@fau.de>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
ipython = "^8.26.0"
ipywidgets = "^8.1.3"
ipympl = "^0.9.4"
ipykernel = "^6.29.5"
matplotlib = "<3.9.0"
# biopsykit = {git="https://github.com/mad-lab-fau/BioPsyKit.git", branch="main"}
biopsykit = {path = "/Users/richer/Documents/PhD/Code_Repositories/BioPsyKit/BioPsyKit", develop=true}
tpcp = ">=2"
jinja2 = "^3.1.4"

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
ipympl = "^0.9.4"
ruff = "^0.6.3"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
target-version = ['py310']
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | docs
    | build
    | dist
    | \.virtual_documents
  )/
)
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
skip_gitignore = true

[tool.poe.tasks]
_format = "ruff format ."
_auto_fix = "ruff check . --fix-only --show-fixes --exit-zero"
_auto_fix_unsafe = "ruff check . --fix-only --show-fixes --exit-zero --unsafe-fixes"
format = ["_auto_fix", "_format"]
format_unsafe = ["_auto_fix_unsafe", "_format"]
lint = { cmd = "ruff check pepbench --fix", help = "Lint all files with ruff." }
_lint_ci = "ruff check pepbench --output-format=github"
_check_format = "ruff format . --check"
ci_check = { sequence = ["_check_format", "_lint_ci"], help = "Check all potential format and linting issues." }
test = { cmd = "pytest --cov=pepbench --cov-report=term-missing --cov-report=xml", help = "Run Pytest with coverage." }
docs = { "script" = "_tasks:task_docs()",  help = "Build the html docs using Sphinx." }
docs_clean = { "script" = "_tasks:task_docs(clean=True)",  help = "Remove all old build files and build a clean version of the docs." }
docs_preview = { cmd = "python -m http.server --directory docs/_build/html", help = "Preview the built html docs." }
version = { script = "_tasks:task_update_version()" }
conf_jupyter = { cmd = "python -m ipykernel install --user --name pepbench --display-name pepbench", help = "Add a new jupyter kernel for the project."}
remove_jupyter = { cmd = "jupyter kernelspec uninstall pepbench", help = "Remove the project specific jupyter kernel."}